pipeline {
    agent any

    environment {
        DOCKER_TOKEN = credentials('docker-push-secret')
        DOCKER_USER = 'andreasmastro'  
        DOCKER_SERVER = 'ghcr.io'
        DOCKER_PREFIX = 'ghcr.io/andreasmastro/rentestate'  
        PROJECT_DIR = 'rentestatefinal-master'
    }

    tools {
        maven 'Maven 3.9.6'  
        jdk 'jdk-21'         
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Test') {
            steps {
                dir(env.PROJECT_DIR) {

                    sh 'mvn clean test'
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    def tag = "${env.BUILD_NUMBER}"
                    
                    dir(env.PROJECT_DIR) {
                        // Ensure Docker is available
                        sh 'docker --version'
                        
                        // Build the Docker image
                        sh """
                            docker build \
                                --rm \
                                -t ${DOCKER_PREFIX}:${tag} \
                                -t ${DOCKER_PREFIX}:latest \
                                -f nonroot-multistage.Dockerfile .
                        """
                        
                        // Login and push
                        withCredentials([string(credentialsId: 'docker-push-secret', variable: 'DOCKER_TOKEN')]) {
                            sh """
                                echo $DOCKER_TOKEN | docker login ${DOCKER_SERVER} -u ${DOCKER_USER} --password-stdin
                                docker push ${DOCKER_PREFIX}:${tag}
                                docker push ${DOCKER_PREFIX}:latest
                            """
                        }
                    }
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
    }
}
